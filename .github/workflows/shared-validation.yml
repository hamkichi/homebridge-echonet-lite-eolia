name: Shared NPM Validation

on:
  workflow_call:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: string
      dry_run_only:
        description: 'Only perform dry run without actual publishing'
        required: false
        default: true
        type: boolean
      npm_tag:
        description: 'NPM tag for publishing'
        required: false
        default: 'latest'
        type: string
    outputs:
      current_version:
        description: 'Current package version'
        value: ${{ jobs.validate.outputs.current_version }}
      new_version:
        description: 'New package version after bump'
        value: ${{ jobs.validate.outputs.new_version }}
      can_publish:
        description: 'Whether the package can be published'
        value: ${{ jobs.validate.outputs.can_publish }}
      version_exists:
        description: 'Whether the version already exists on NPM'
        value: ${{ jobs.validate.outputs.version_exists }}

jobs:
  validate:
    name: NPM Package Validation
    runs-on: ubuntu-latest
    
    outputs:
      current_version: ${{ steps.version.outputs.current }}
      new_version: ${{ steps.version.outputs.new }}
      can_publish: ${{ steps.validation.outputs.result }}
      version_exists: ${{ steps.npm-check.outputs.exists }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Calculate version
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Calculate new version based on input
        if [ "${{ inputs.version_type }}" = "prerelease" ]; then
          NEW_VERSION=$(npm version --no-git-tag-version prerelease --preid=beta)
        else
          NEW_VERSION=$(npm version --no-git-tag-version ${{ inputs.version_type }})
        fi
        
        # Remove 'v' prefix if present
        NEW_VERSION=${NEW_VERSION#v}
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        echo "Version change: $CURRENT_VERSION → $NEW_VERSION"
        
        # Reset package.json to avoid committing version change during validation
        git checkout package.json
    
    - name: Check NPM registry
      id: npm-check
      run: |
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        NEW_VERSION="${{ steps.version.outputs.new }}"
        
        if npm view "$PACKAGE_NAME@$NEW_VERSION" version 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️  Version $NEW_VERSION already exists on NPM"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ Version $NEW_VERSION is available on NPM"
        fi
    
    - name: Run comprehensive validation
      id: validation
      run: |
        echo "🔍 Running comprehensive validation..."
        
        # 1. Lint check
        echo "→ Running ESLint..."
        npm run lint
        
        # 2. Build check
        echo "→ Building TypeScript..."
        npm run build
        
        # 3. Test check
        echo "→ Running tests..."
        npm run test
        
        # 4. Package validation
        echo "→ Validating package.json..."
        node -e "
        const pkg = require('./package.json');
        const required = ['name', 'version', 'description', 'main', 'engines', 'keywords', 'repository', 'license'];
        const missing = required.filter(field => !pkg[field]);
        if (missing.length > 0) {
          console.error('❌ Missing required fields:', missing.join(', '));
          process.exit(1);
        }
        console.log('✅ Package.json validation passed');
        "
        
        # 5. Version consistency check
        echo "→ Checking version consistency..."
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [ -f "dist/settings.js" ]; then
          SETTINGS_VERSION=$(node -p "require('./dist/settings.js').VERSION || 'undefined'")
          if [ "$SETTINGS_VERSION" != "undefined" ] && [ "$PACKAGE_VERSION" != "$SETTINGS_VERSION" ]; then
            echo "⚠️  Version mismatch detected: package.json ($PACKAGE_VERSION) != settings.ts ($SETTINGS_VERSION)"
            echo "This will be updated during publish process"
          fi
        fi
        
        # 6. Test pack
        echo "→ Testing package creation..."
        npm pack --dry-run
        
        echo "result=true" >> $GITHUB_OUTPUT
        echo "✅ All validation checks passed!"
    
    - name: Simulate publish (if dry run)
      if: ${{ inputs.dry_run_only }}
      run: |
        echo "🚀 Simulating NPM publish..."
        
        # Temporarily update version for simulation
        if [ "${{ inputs.version_type }}" = "prerelease" ]; then
          npm version prerelease --preid=beta --no-git-tag-version
        else
          npm version ${{ inputs.version_type }} --no-git-tag-version
        fi
        
        # Update settings.ts for consistency
        if [ -f "src/settings.ts" ]; then
          UPDATED_VERSION=$(node -p "require('./package.json').version")
          sed -i "s/export const VERSION = '[^']*';/export const VERSION = '$UPDATED_VERSION';/" src/settings.ts
        fi
        
        # Rebuild with updated version
        npm run build
        
        # Final validation
        npm run lint
        npm run test
        
        # Simulate publish
        npm publish --dry-run --tag ${{ inputs.npm_tag }}
        
        echo "✅ Publish simulation completed successfully!"