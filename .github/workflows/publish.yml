name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
          - prepatch
          - preminor
          - premajor
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: true
        type: boolean
      npm_tag:
        description: 'NPM tag for publishing'
        required: false
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - alpha
          - next

jobs:
  validate:
    name: Pre-publish Validation
    uses: ./.github/workflows/shared-validation.yml
    with:
      version_type: ${{ inputs.version_type }}
      dry_run_only: ${{ inputs.dry_run }}
      npm_tag: ${{ inputs.npm_tag }}

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !inputs.dry_run && needs.validate.outputs.can_publish == 'true' && needs.validate.outputs.version_exists == 'false' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Install dependencies
      run: npm ci
    
    - name: Update version and rebuild
      run: |
        echo "üìù Updating version to ${{ needs.validate.outputs.new_version }}..."
        
        # Update package.json version
        if [ "${{ inputs.version_type }}" = "prerelease" ]; then
          npm version prerelease --preid=beta --no-git-tag-version
        else
          npm version ${{ inputs.version_type }} --no-git-tag-version
        fi
        
        # Update version in settings.ts if it exists
        if [ -f "src/settings.ts" ]; then
          echo "‚Üí Updating settings.ts VERSION..."
          sed -i "s/export const VERSION = '[^']*';/export const VERSION = '${{ needs.validate.outputs.new_version }}';/" src/settings.ts
        fi
        
        # Rebuild with updated version
        npm run build
    
    - name: Final validation
      run: |
        echo "üîç Final validation before publish..."
        npm run lint
        npm run test
        
        # Verify version consistency
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [ -f "dist/settings.js" ]; then
          SETTINGS_VERSION=$(node -p "require('./dist/settings.js').VERSION || 'undefined'")
          if [ "$SETTINGS_VERSION" != "undefined" ] && [ "$PACKAGE_VERSION" != "$SETTINGS_VERSION" ]; then
            echo "‚ùå Version mismatch still exists!"
            echo "Package: $PACKAGE_VERSION, Settings: $SETTINGS_VERSION"
            exit 1
          fi
        fi
        echo "‚úÖ Final validation passed"
    
    - name: Create Git tag and commit
      run: |
        git add .
        git commit -m "chore: bump version to ${{ needs.validate.outputs.new_version }}"
        git tag "v${{ needs.validate.outputs.new_version }}"
    
    - name: Publish to NPM
      run: |
        echo "üöÄ Publishing to NPM with tag: ${{ inputs.npm_tag }}"
        npm publish --tag ${{ inputs.npm_tag }}
        echo "‚úÖ Published successfully!"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Push changes and tags
      run: |
        git push origin ${{ github.ref_name }}
        git push origin "v${{ needs.validate.outputs.new_version }}"
    
    - name: Create GitHub Release
      if: ${{ inputs.npm_tag == 'latest' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate.outputs.new_version }}
        release_name: Release v${{ needs.validate.outputs.new_version }}
        body: |
          ## Changes
          
          Version ${{ needs.validate.outputs.new_version }} of homebridge-echonet-lite-eolia
          
          ### Installation
          ```bash
          npm install homebridge-echonet-lite-eolia@${{ needs.validate.outputs.new_version }}
          ```
          
          ### Full Changelog
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: ${{ contains(needs.validate.outputs.new_version, 'beta') || contains(needs.validate.outputs.new_version, 'alpha') }}

  notify:
    name: Publish Notification
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: always()
    
    steps:
    - name: Notify results
      run: |
        VALIDATION_RESULT="${{ needs.validate.result }}"
        PUBLISH_RESULT="${{ needs.publish.result }}"
        VERSION_EXISTS="${{ needs.validate.outputs.version_exists }}"
        
        if [ "$VALIDATION_RESULT" != "success" ]; then
          echo "‚ùå Validation failed - check the validation job logs"
          exit 1
        elif [ "$VERSION_EXISTS" = "true" ]; then
          echo "‚ö†Ô∏è  Version ${{ needs.validate.outputs.new_version }} already exists on NPM"
          echo "Cannot publish. Please use a different version type."
          exit 1
        elif [ "${{ inputs.dry_run }}" = "true" ]; then
          echo "‚úÖ Dry run completed successfully!"
          echo "Version ${{ needs.validate.outputs.new_version }} is ready for publishing"
          echo ""
          echo "To actually publish:"
          echo "1. Re-run this workflow"
          echo "2. Set 'Dry run' to false"
          echo "3. Keep the same version type: ${{ inputs.version_type }}"
        elif [ "$PUBLISH_RESULT" = "success" ]; then
          echo "üéâ Successfully published version ${{ needs.validate.outputs.new_version }} to NPM!"
          echo "Package: https://www.npmjs.com/package/homebridge-echonet-lite-eolia"
        else
          echo "‚ùå Publish workflow failed"
          echo "Check the publish job logs for details"
        fi