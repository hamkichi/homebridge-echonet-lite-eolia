name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      dry_run:
        description: 'Dry run (test without publishing)'
        required: false
        default: true
        type: boolean
      npm_tag:
        description: 'NPM tag for publishing'
        required: false
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - alpha
          - next
      force_rebuild:
        description: 'Force rebuild (ignore cache)'
        required: false
        default: false
        type: boolean

jobs:
  # Verify CI status before publishing
  verify-ci:
    name: Verify CI Status
    runs-on: ubuntu-latest
    
    outputs:
      ci-success: ${{ steps.check-ci.outputs.success }}
      build-cache-key: ${{ steps.check-ci.outputs.build_cache_key }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check CI status
      id: check-ci
      uses: actions/github-script@v7
      with:
        script: |
          // Get the latest CI run for this commit
          const { data: runs } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ci.yml',
            head_sha: context.sha,
            status: 'completed'
          });
          
          const latestRun = runs.workflow_runs[0];
          
          if (!latestRun) {
            core.setFailed('No CI run found for this commit. Run CI first.');
            return;
          }
          
          if (latestRun.conclusion !== 'success') {
            core.setFailed(`CI failed with status: ${latestRun.conclusion}`);
            return;
          }
          
          console.log(`‚úÖ CI passed: ${latestRun.html_url}`);
          core.setOutput('success', 'true');
          
          // Generate build cache key for artifact reuse
          const buildCacheKey = `${{ runner.os }}-build-${{ hashFiles('src/**/*.ts', 'tsconfig.json', 'package-lock.json') }}`;
          core.setOutput('build_cache_key', buildCacheKey);

  # Quick validation and version preparation
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: verify-ci
    if: needs.verify-ci.outputs.ci-success == 'true'
    
    outputs:
      current_version: ${{ steps.version.outputs.current }}
      new_version: ${{ steps.version.outputs.new }}
      can_publish: ${{ steps.npm-check.outputs.can_publish }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Restore or rebuild assets
      run: |
        if [ "${{ inputs.force_rebuild }}" = "true" ]; then
          echo "üîÑ Force rebuild requested"
          npm run build
        else
          # Try to restore from cache
          cache_key="${{ needs.verify-ci.outputs.build-cache-key }}"
          echo "üîç Attempting to restore build cache: $cache_key"
          
          # If cache restore fails, rebuild
          if ! npm run build; then
            echo "‚ö†Ô∏è Cache miss or build failed, rebuilding..."
            npm run build
          fi
        fi
    
    - name: Calculate version
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Calculate new version
        if [ "${{ inputs.version_type }}" = "prerelease" ]; then
          NEW_VERSION=$(npm version --no-git-tag-version prerelease --preid=beta)
        else
          NEW_VERSION=$(npm version --no-git-tag-version ${{ inputs.version_type }})
        fi
        
        NEW_VERSION=${NEW_VERSION#v}
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        echo "Version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
        
        # Reset package.json for validation
        git checkout package.json
    
    - name: NPM availability check
      id: npm-check
      run: |
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        NEW_VERSION="${{ steps.version.outputs.new }}"
        
        if npm view "$PACKAGE_NAME@$NEW_VERSION" version 2>/dev/null; then
          echo "can_publish=false" >> $GITHUB_OUTPUT
          echo "‚ùå Version $NEW_VERSION already exists on NPM"
          exit 1
        else
          echo "can_publish=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Version $NEW_VERSION is available"
        fi
    
    - name: Dry run simulation
      if: inputs.dry_run
      run: |
        echo "üöÄ DRY RUN - Simulating NPM publish..."
        
        # Apply version changes
        if [ "${{ inputs.version_type }}" = "prerelease" ]; then
          npm version prerelease --preid=beta --no-git-tag-version
        else
          npm version ${{ inputs.version_type }} --no-git-tag-version
        fi
        
        # Update settings.ts
        if [ -f "src/settings.ts" ]; then
          sed -i "s/export const VERSION = '[^']*';/export const VERSION = '${{ steps.version.outputs.new }}';/" src/settings.ts
        fi
        
        # Rebuild and test
        npm run build
        npm run lint
        npm run test
        
        # Simulate publish
        npm publish --dry-run --tag ${{ inputs.npm_tag }}
        
        echo "‚úÖ Dry run completed successfully!"
    
    - name: Upload prepared assets
      if: ${{ !inputs.dry_run }}
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-${{ github.sha }}
        path: |
          dist/
          src/
          package.json
          package-lock.json
        retention-days: 1

  # Actual NPM publishing
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [verify-ci, prepare-release]
    if: ${{ !inputs.dry_run && needs.prepare-release.outputs.can_publish == 'true' }}
    
    outputs:
      published_version: ${{ steps.publish.outputs.version }}
      pr_url: ${{ steps.create-pr.outputs.pr_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download prepared assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets-${{ github.sha }}
        path: .
    
    - name: Apply version changes
      run: |
        NEW_VERSION="${{ needs.prepare-release.outputs.new_version }}"
        echo "üìù Applying version $NEW_VERSION..."
        
        # Update package.json
        if [ "${{ inputs.version_type }}" = "prerelease" ]; then
          npm version prerelease --preid=beta --no-git-tag-version
        else
          npm version ${{ inputs.version_type }} --no-git-tag-version
        fi
        
        # Update settings.ts
        if [ -f "src/settings.ts" ]; then
          sed -i "s/export const VERSION = '[^']*';/export const VERSION = '$NEW_VERSION';/" src/settings.ts
        fi
        
        # Final rebuild
        npm run build
    
    - name: Final validation
      run: |
        echo "üîç Final pre-publish validation..."
        
        # Quick lint and test
        npm run lint
        npm run test
        
        # Version consistency check
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        SETTINGS_VERSION=$(node -p "require('./dist/settings.js').VERSION || 'undefined'")
        
        if [ "$SETTINGS_VERSION" != "undefined" ] && [ "$PACKAGE_VERSION" != "$SETTINGS_VERSION" ]; then
          echo "‚ùå Version mismatch: package.json ($PACKAGE_VERSION) != settings.ts ($SETTINGS_VERSION)"
          exit 1
        fi
        
        echo "‚úÖ Final validation passed"
    
    - name: Publish to NPM
      id: publish
      run: |
        echo "üöÄ Publishing to NPM with tag: ${{ inputs.npm_tag }}"
        npm publish --tag ${{ inputs.npm_tag }}
        
        PUBLISHED_VERSION=$(node -p "require('./package.json').version")
        echo "version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        echo "‚úÖ Published version $PUBLISHED_VERSION successfully!"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create release branch and PR
      id: create-pr
      run: |
        VERSION="${{ steps.publish.outputs.version }}"
        BRANCH_NAME="release/v$VERSION"
        
        # Create release branch
        git checkout -b "$BRANCH_NAME"
        git add .
        git commit -m "chore: release version $VERSION"
        
        # Create and push tag
        git tag "v$VERSION"
        git push origin "v$VERSION"
        git push origin "$BRANCH_NAME"
        
        # Create PR via GitHub API
        PR_BODY="## üì¶ Release $VERSION

This automated PR contains the version bump and changes for release $VERSION.

**‚úÖ Published to NPM:** https://www.npmjs.com/package/homebridge-echonet-lite-eolia
**üè∑Ô∏è NPM Tag:** \`${{ inputs.npm_tag }}\`
**üìã Version Type:** \`${{ inputs.version_type }}\`

### Installation
\`\`\`bash
npm install homebridge-echonet-lite-eolia@$VERSION
\`\`\`

### Changes
- Version bump: ${{ needs.prepare-release.outputs.current_version }} ‚Üí $VERSION
- Updated settings.ts VERSION constant
- Created git tag v$VERSION

**Note:** This package has already been published to NPM. Merge this PR to update the main branch with the version changes.

ü§ñ Generated by NPM publish workflow"
        
        PR_URL=$(gh pr create \
          --title "chore: release version $VERSION" \
          --body "$PR_BODY" \
          --base main \
          --head "$BRANCH_NAME" || echo "")
        
        echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        echo "Created PR: $PR_URL"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create GitHub Release
      if: ${{ inputs.npm_tag == 'latest' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.publish.outputs.version }}
        release_name: Release v${{ steps.publish.outputs.version }}
        body: |
          ## üöÄ Release ${{ steps.publish.outputs.version }}
          
          **NPM Package:** https://www.npmjs.com/package/homebridge-echonet-lite-eolia
          
          ### Installation
          ```bash
          npm install homebridge-echonet-lite-eolia@${{ steps.publish.outputs.version }}
          ```
          
          ### Usage with Homebridge
          Compatible with Homebridge 1.8.0+ and 2.0.0-beta.0+
          
          See [README.md](README.md) for configuration details.
        draft: false
        prerelease: ${{ contains(steps.publish.outputs.version, 'beta') || contains(steps.publish.outputs.version, 'alpha') }}

  # Cleanup and notification
  notify:
    name: Publish Notification
    runs-on: ubuntu-latest
    needs: [verify-ci, prepare-release, publish]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          // Clean up temporary artifacts
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId
          });
          
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.includes('release-assets-')) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
          }
    
    - name: Report results
      run: |
        echo "## üìã Publish Results"
        echo ""
        
        if [ "${{ needs.verify-ci.result }}" != "success" ]; then
          echo "‚ùå **CI verification failed**"
          echo "Make sure CI passes before publishing"
          exit 1
        elif [ "${{ needs.prepare-release.result }}" != "success" ]; then
          echo "‚ùå **Release preparation failed**"
          echo "Check the prepare-release job logs"
          exit 1
        elif [ "${{ inputs.dry_run }}" = "true" ]; then
          echo "‚úÖ **Dry run completed successfully!**"
          echo ""
          echo "**Ready to publish:**"
          echo "- Version: ${{ needs.prepare-release.outputs.current_version }} ‚Üí ${{ needs.prepare-release.outputs.new_version }}"
          echo "- NPM tag: ${{ inputs.npm_tag }}"
          echo ""
          echo "**To publish for real:**"
          echo "1. Re-run this workflow"
          echo "2. Set 'Dry run' to **false**"
          echo "3. Keep the same settings"
        elif [ "${{ needs.publish.result }}" = "success" ]; then
          echo "üéâ **Successfully published!**"
          echo ""
          echo "**Published version:** ${{ needs.publish.outputs.published_version }}"
          echo "**NPM package:** https://www.npmjs.com/package/homebridge-echonet-lite-eolia"
          echo "**Release PR:** ${{ needs.publish.outputs.pr_url }}"
          echo ""
          echo "**Next steps:**"
          echo "1. Review and merge the release PR"
          echo "2. Update documentation if needed"
        else
          echo "‚ùå **Publishing failed**"
          echo "Check the publish job logs for details"
          exit 1
        fi