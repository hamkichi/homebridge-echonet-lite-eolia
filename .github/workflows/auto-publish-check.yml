name: Auto Publish Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  determine-version:
    name: Determine Version Strategy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    
    outputs:
      version_type: ${{ steps.version-strategy.outputs.version_type }}
      npm_tag: ${{ steps.version-strategy.outputs.npm_tag }}
      current_version: ${{ steps.current-version.outputs.current }}
      is_beta: ${{ steps.current-version.outputs.is_beta }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get current version info
      id: current-version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if current version is already a beta
        if [[ "$CURRENT_VERSION" == *"beta"* ]]; then
          echo "is_beta=true" >> $GITHUB_OUTPUT
          echo "Current version is beta: $CURRENT_VERSION"
        else
          echo "is_beta=false" >> $GITHUB_OUTPUT
          echo "Current version is stable: $CURRENT_VERSION"
        fi
    
    - name: Determine version strategy
      id: version-strategy
      run: |
        # Check commit messages since last tag to determine version bump type
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        IS_BETA="${{ steps.current-version.outputs.is_beta }}"
        
        if [ -z "$LAST_TAG" ]; then
          # No tags exist, use all commits
          COMMIT_RANGE="HEAD"
        else
          # Get commits since last tag
          COMMIT_RANGE="$LAST_TAG..HEAD"
        fi
        
        # Analyze commit messages for conventional commit patterns
        COMMITS=$(git log --pretty=format:"%s" $COMMIT_RANGE)
        
        echo "Analyzing commits since $LAST_TAG:"
        echo "$COMMITS"
        
        # Determine base version type
        if echo "$COMMITS" | grep -qE "(BREAKING CHANGE|!:)"; then
          BASE_VERSION_TYPE="major"
          echo "üö® Breaking changes detected - Major version bump"
        elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
          BASE_VERSION_TYPE="minor"
          echo "‚ú® New features detected - Minor version bump"
        else
          BASE_VERSION_TYPE="patch"
          echo "üîß Patches/fixes detected - Patch version bump"
        fi
        
        # Adjust for beta versions
        if [ "$IS_BETA" = "true" ]; then
          VERSION_TYPE="prerelease"
          NPM_TAG="beta"
          echo "üì¶ Beta version detected - Using prerelease bump"
        else
          VERSION_TYPE="$BASE_VERSION_TYPE"
          NPM_TAG="latest"
          echo "üì¶ Stable version - Using $VERSION_TYPE bump"
        fi
        
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
        echo "Selected version type: $VERSION_TYPE, NPM tag: $NPM_TAG"

  validate:
    name: Auto NPM Publish Validation
    needs: determine-version
    uses: ./.github/workflows/shared-validation.yml
    with:
      version_type: ${{ needs.determine-version.outputs.version_type }}
      dry_run_only: true
      npm_tag: ${{ needs.determine-version.outputs.npm_tag }}
    
  notify:
    name: Publish Status Notification
    runs-on: ubuntu-latest
    needs: [determine-version, validate]
    if: always()
    
    steps:
    - name: Comment on PR (if applicable)
      if: github.event.pull_request.merged == true
      uses: actions/github-script@v7
      with:
        script: |
          const currentVersion = '${{ needs.determine-version.outputs.current_version }}';
          const nextVersion = '${{ needs.validate.outputs.new_version }}';
          const versionType = '${{ needs.determine-version.outputs.version_type }}';
          const npmTag = '${{ needs.determine-version.outputs.npm_tag }}';
          const isBeta = '${{ needs.determine-version.outputs.is_beta }}' === 'true';
          const versionExists = '${{ needs.validate.outputs.version_exists }}' === 'true';
          const canPublish = '${{ needs.validate.outputs.can_publish }}' === 'true';
          
          let body = `## üì¶ NPM Publish Status\n\n`;
          body += `**Current Version:** \`${currentVersion}\`\n`;
          body += `**Next Version:** \`${nextVersion}\`\n`;
          body += `**Bump Type:** \`${versionType}\`\n`;
          body += `**NPM Tag:** \`${npmTag}\`\n\n`;
          
          if (!canPublish) {
            body += `‚ùå **Validation failed**\n\n`;
            body += `Check the validation logs for details.\n`;
          } else if (versionExists) {
            body += `‚ö†Ô∏è **Version ${nextVersion} already exists on NPM**\n\n`;
            body += `Cannot auto-publish. Please manually run the publish workflow with a different version type.\n`;
          } else {
            body += `‚úÖ **Ready for NPM publish!**\n\n`;
            body += `Dry run completed successfully. To publish:\n`;
            body += `1. Go to [Actions](${context.payload.repository.html_url}/actions)\n`;
            body += `2. Run "Publish to NPM" workflow\n`;
            body += `3. Use version type: \`${versionType}\`\n`;
            body += `4. Set dry run to \`false\`\n`;
            body += `5. Use NPM tag: \`${npmTag}\`\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });